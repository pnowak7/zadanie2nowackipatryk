name: CI/CD Docker Multi-Arch

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Budowa obrazu, cache i skan CVE
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout kodu
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Ustawienie QEMU (potrzebne do budowy multi-arch)
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      # 3. Ustawienie Buildx (multi-arch build)
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # 4. Logowanie do DockerHub (cache)
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # 5. Logowanie do GitHub Container Registry (GHCR)
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 6. Budowa i wypchnięcie obrazu multi-arch z cache (cache-from i cache-to w DockerHub)
      - name: Build and push multi-arch image
        id: build_image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false            # najpierw tylko build, później skan
          builder: ${{ steps.setup-buildx.outputs.name }}
          cache-from: type=registry,ref=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app-cache:latest
          cache-to: type=registry,ref=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app-cache:latest,mode=max
          tags: |
            ghcr.io/${{ github.repository_owner }}/weather-app:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/weather-app:latest

      # 7. Eksport pliku obrazu do lokalnego pliku (żeby Trivy mógł skanować)
      - name: Save image for scanning
        run: |
          docker save ghcr.io/${{ github.repository_owner }}/weather-app:${{ github.sha }} -o app_image.tar

      # 8. Skanowanie obrazu przy pomocy Trivy
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@v0.9.1
        with:
          scan-type: 'image'
          image-ref: './app_image.tar'
          format: 'json'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      # 9. Jeżeli Trivy nie znalazł wysokich ani krytycznych luk (exit 0), push obrazu
      - name: Push image to GHCR
        if: success()
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          builder: ${{ steps.setup-buildx.outputs.name }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/weather-app:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/weather-app:latest
